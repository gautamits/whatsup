{"version":3,"sources":["helpers/useWhatsappLink.ts","components/WhatsappLink.tsx","components/History.tsx","components/CountrySelector.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useWhatsappLink","phone","React","useMemo","href","phoneWithCountryCode","WhatsappLink","number","name","index","useState","dialog","setDialog","useContext","CountContext","history","setHistory","Card","className","ListItemLink","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","onClick","e","Edit","Delete","Link","Call","EditDialog","handleClose","handleSave","userName","newHistory","splice","DeleteDialog","handleDelete","props","ListItem","button","component","setName","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","value","onChange","target","DialogActions","Button","color","keepMounted","History","List","style","overflow","map","hist","idx","usePhoneState","createPersistedState","useCountryState","useHistory","createContext","selectedCountry","CountrySelector","setSelectedCountry","setPhone","window","innerHeight","windowHeight","setWindowHeight","handleResize","useEffect","addEventListener","removeEventListener","Provider","Paper","elevation","onSubmit","preventDefault","location","height","FormControl","InputLabel","htmlFor","Select","inputProps","countryDialInfo","flag","dial_code","Input","required","variant","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","scope","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.abd53c65.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function useWhatsappLink({phone}: {phone: string}){\n  return React.useMemo(() => {\n    if(phone) {\n      return {\n        href: `https://api.whatsapp.com/send?phone=${phone}`,\n        phoneWithCountryCode: `${phone}`\n      }\n    }\n    return {href: '#', phoneWithCountryCode: ''}\n  }, [phone])\n}","import React from 'react'\nimport {ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,DialogContentText,\n  TextField,\n  DialogActions,\n  Button,\n  Card,\n  Link\n} from '@material-ui/core'\nimport useWhatsappLink from '../helpers/useWhatsappLink'\nimport {Edit, Delete, Call} from '@material-ui/icons';\nimport {CountContext} from './CountrySelector'\n\n\nexport default function WhatsappLink({number, name, index}: {number: string, name: string, index: number}){\n  const {href} = useWhatsappLink({phone: number})\n  const [dialog, setDialog] = React.useState<'edit' | 'delete' | null>(null)\n  const {history, setHistory} = React.useContext(CountContext)\n  \n  function handleSave(userName: string) {\n    const newHistory = [...history]\n    newHistory.splice(index, 1, {name: userName, number})\n    setHistory(newHistory)\n    setDialog(null)\n  }\n\n  function handleDelete() {\n    const newHistory = [...history]\n    newHistory.splice(index, 1)\n    setHistory(newHistory)\n    setDialog(null)\n  }\n  return (\n    <>\n      <Card className='history-card'>\n      <ListItemLink href={href}>\n        <ListItemText primary={name} />\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" aria-label=\"edit\" onClick={e=>setDialog('edit')}>\n            <Edit />\n          </IconButton>\n          <IconButton edge=\"end\" aria-label=\"delete\" onClick={e=>setDialog('delete')}>\n            <Delete />\n          </IconButton>\n          <Link href={`tel:${number}`}>\n            <IconButton edge=\"end\" aria-label=\"call\">\n              <Call/>\n            </IconButton>\n          </Link>\n        </ListItemSecondaryAction>\n      </ListItemLink>\n      </Card>\n      {dialog === 'edit' &&\n        <EditDialog\n          handleClose={()=>setDialog(null)}\n          name={number === name ? '' : name}\n          handleSave={handleSave}\n        />\n      }\n      {dialog === 'delete' &&\n        <DeleteDialog\n          handleClose={()=>setDialog(null)}\n          handleDelete={handleDelete}\n          name={name}\n        />\n      }\n    </>\n  )\n}\n\nfunction ListItemLink(props: any) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\nfunction EditDialog({handleClose, handleSave, name}: {handleClose: () => void, handleSave: (name:string) => void, name: string}){\n  const [userName, setName] = React.useState(name)\n  return (\n    <Dialog open onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Enter Name</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          To save this number, Please enter relevant name. Saved lists can be seen in separate tab.\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          label=\"Contact name\"\n          type=\"text\"\n          fullWidth\n          value={userName}\n          onChange={e=>setName(e.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={e=>handleSave(userName)} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nfunction DeleteDialog({handleClose, handleDelete, name}: {handleClose: () => void, handleDelete: () => void, name: string}){\n  return (\n    <Dialog\n      open\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">Confirm deleting this entry ?</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          Are you sure you want to remove <b>{name}</b>. This action is irreversible.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleDelete} color=\"primary\">\n          Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}","import React from 'react'\nimport WhatsappLink from './WhatsappLink';\nimport {CountContext} from './CountrySelector'\nimport {\n  // Link,\n  List,\n  // ListItem, ListItemText, ListItemIcon\n} from '@material-ui/core'\n\nexport default function History() {\n  const {history} = React.useContext(CountContext)\n  return (\n    <List style={{overflow:'auto'}}>\n      {history.map((hist, idx)=><WhatsappLink {...hist} index={idx}/>)}\n    </List>\n  )\n}","import React, {useEffect} from 'react'\nimport countryDialInfo from '../helpers/country-dial-info.json'\nimport HistoryComponent from './History'\nimport {Input, FormControl, InputLabel, Select, Button, Paper} from '@material-ui/core'\nimport useWhatsappLink from '../helpers/useWhatsappLink'\n\nimport createPersistedState from 'use-persisted-state';\nconst usePhoneState = createPersistedState<string>('phone');\nconst useCountryState = createPersistedState<string>('country');\nconst useHistory = createPersistedState<History[]>('history');\n\ninterface History {\n  number: string;\n  name: string;\n}\n\ninterface GlobalContext {\n  history: History[];\n  setHistory: React.Dispatch<React.SetStateAction<History[]>>;\n  selectedCountry: string;\n}\n\nexport const CountContext = React.createContext<GlobalContext>({history: [], setHistory: () => {}, selectedCountry: ''})\n\nexport default function CountrySelector() {\n  const [selectedCountry, setSelectedCountry] = useCountryState('')\n  const [phone, setPhone] = usePhoneState('')\n  const [history, setHistory] = useHistory([])\n  const [windowHeight, setWindowHeight] = React.useState(window.innerHeight - 32)\n\n  function handleResize(e:UIEvent) {\n    setWindowHeight(window.innerHeight - 32)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  },[])\n\n  const {href, phoneWithCountryCode} = useWhatsappLink({phone: `${selectedCountry}${phone}`})\n\n  function handleSubmit(e:any){\n    e.preventDefault();\n    setHistory([...history, {number: phoneWithCountryCode, name: phoneWithCountryCode}])\n    window.location.href = href\n  }\n  return (\n    <CountContext.Provider\n      value={{history, setHistory, selectedCountry}}\n    >\n      <Paper elevation={3}>\n      <form onSubmit={handleSubmit} style={{height: windowHeight}}>\n        <div>\n          <FormControl\n          >\n            <InputLabel htmlFor=\"country\">Country</InputLabel>\n            <Select\n              // native\n              value={selectedCountry}\n              onChange={e=>setSelectedCountry(e.target.value as string)}\n              inputProps={{\n                name: 'age',\n                id: 'country',\n              }}\n            >\n              {countryDialInfo.map(({name, flag, dial_code}) => <option value={dial_code}>{flag} {dial_code} {name}</option>)}\n            </Select>\n          </FormControl>\n          <FormControl>\n            <InputLabel htmlFor=\"phone\">Phone</InputLabel>\n            <Input required id=\"phone\" type=\"tel\" value={phone} onChange={e=>setPhone(e.target.value)} />\n          </FormControl> \n        </div>\n        <HistoryComponent />\n        <Button\n          variant='contained'\n          color='primary'\n          type=\"submit\"\n        >\n          start chat\n        </Button>\n      </form>\n      </Paper>\n     </CountContext.Provider>\n  )\n}","import React from 'react';\nimport './App.css';\nimport CountrySelector from './components/CountrySelector'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CountrySelector/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl, {\n      scope: '/whatsup/'\n    })\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}